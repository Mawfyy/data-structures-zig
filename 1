const std = @import("std");
const print = @import("std").debug.print;
const assert = @import("std").debug.assert;

const Node = struct {
    data: u8,
    next: *Node,
};

const Linkedlist = struct {
    head: ?*Node,
    tail: ?*Node,

    pub fn new() Linkedlist {
        return Linkedlist{
            .head = undefined,
            .tail = undefined,
        };
    }

    pub fn push_back(self: *Linkedlist, data: u8) void {
        var node = Node{
            .data = data,
            .next = undefined,
        };

        if (self.tail == null and self.head == null) {
            self.tail = &node;
            self.head = &node;
        } else {
            self.tail.?.next = &node;
            self.tail = &node;
        }
    }

    pub fn push_front(self: *Linkedlist, data: u8) void {
        if (self.head == null) {
            var node = Node{
                .next = undefined,
                .data = data,
            };

            self.head = node;
        } else {
            var node = Node{
                .next = &self.head.?,
                .data = data,
            };

            self.head = node;
        }
    }

    pub fn pop_front(self: *Linkedlist) u8 {
        const data = self.head.?.data;
        self.head = self.head.?.next.*;
        return data;
    }

    pub fn size(self: *Linkedlist) u8 {
        var node: ?*Node = self.head;
        var total_items: u8 = 0;

        while (node.?.data != undefined) {
            node = node.?.next.*;
            print("{s}", .{"testing_here"});
            total_items += 1;
        }

        return total_items;
    }
};

pub fn main() !void {
    var linkedlist = Linkedlist.new();
    linkedlist.push_back(10);
    linkedlist.push_back(20);
    print("{d}", .{linkedlist.head.?.next});
}

test "counting_total_items" {
    var linkedlist = Linkedlist.new();
    linkedlist.push_back(10);
    linkedlist.push_back(20);
    var total_nodes = linkedlist.size();

    print("{d}", .{total_nodes});
}

test "popping_front" {
    var linkedlist = Linkedlist.new();
    linkedlist.push_front(10);
    linkedlist.push_front(20);
    const data = linkedlist.pop_front();
    assert(data == 20);
}

test "add_linkedlist_one_number_tail" {
    var linkedlist = Linkedlist.new();
    linkedlist.push_back(10);
    assert(linkedlist.tail.?.data == 10);
}

test "add_linkedlist_two_numbers_tail" {
    var linkedlist = Linkedlist.new();
    linkedlist.push_back(10);
    linkedlist.push_back(20);
    assert(linkedlist.tail.?.data == 20);
}

test "add_linkedlist_head_one_number" {
    var linkedlist = Linkedlist.new();
    linkedlist.push_front(10);
    assert(linkedlist.head.?.data == 10);
}

test "add_linkedlist_head_two_numbers" {
    var linkedlist = Linkedlist.new();
    linkedlist.push_front(10);
    linkedlist.push_front(20);
    assert(linkedlist.head.?.data == 20);
}
